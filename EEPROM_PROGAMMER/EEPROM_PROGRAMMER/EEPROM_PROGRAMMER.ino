#define SHIFT_DATA 2
#define SHIFT_CLK 3
#define SHIFT_LATCH 4
#define EEPROM_D0 5
#define EEPROM_D7 12
#define WRITE_EN  13


/* LCD WITHOUT RAM
byte data[] = {
0xA9, 0xff, 0x8D, 0x02, 0x60, 0xA9, 0xE0, 0x8D, 0x03, 0x60, 0xA9, 0x38, 0x8D, 0x00, 0x60, 0xA9,
0x00, 0x8D, 0x01, 0x60, 0xA9, 0x80, 0x8D, 0x01, 0x60, 0xA9, 0x00, 0x8D, 0x01, 0x60, 0xA9, 0x0E,
0x8D, 0x00, 0x60, 0xA9, 0x00, 0x8D, 0x01, 0x60, 0xA9, 0x80, 0x8D, 0x01, 0x60, 0xA9, 0x00, 0x8D,
0x01, 0x60, 0xA9, 0x06, 0x8D, 0x00, 0x60, 0xA9, 0x00, 0x8D, 0x01, 0x60, 0xA9, 0x80, 0x8D, 0x01,
0x60, 0xA9, 0x00, 0x8D, 0x01, 0x60, 0xA9, 0x48, 0x8D, 0x00, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60,
0xA9, 0xA0, 0x8D, 0x01, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0x65, 0x8D, 0x00, 0x60, 0xA9,
0x20, 0x8D, 0x01, 0x60, 0xA9, 0xA0, 0x8D, 0x01, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0x6C,
0x8D, 0x00, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0xA0, 0x8D, 0x01, 0x60, 0xA9, 0x20, 0x8D,
0x01, 0x60, 0xA9, 0x6C, 0x8D, 0x00, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0xA0, 0x8D, 0x01,
0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0x6F, 0x8D, 0x00, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60,
0xA9, 0xA0, 0x8D, 0x01, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0x2C, 0x8D, 0x00, 0x60, 0xA9,
0x20, 0x8D, 0x01, 0x60, 0xA9, 0xA0, 0x8D, 0x01, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0x20,
0x8D, 0x00, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0xA0, 0x8D, 0x01, 0x60, 0xA9, 0x20, 0x8D,
0x01, 0x60, 0xA9, 0x77, 0x8D, 0x00, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0xA0, 0x8D, 0x01,
0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0x6F, 0x8D, 0x00, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60,
0xA9, 0xA0, 0x8D, 0x01, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0x72, 0x8D, 0x00, 0x60, 0xA9,
0x20, 0x8D, 0x01, 0x60, 0xA9, 0xA0, 0x8D, 0x01, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0x6C,
0x8D, 0x00, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0xA0, 0x8D, 0x01, 0x60, 0xA9, 0x20, 0x8D,
0x01, 0x60, 0xA9, 0x64, 0x8D, 0x00, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0xA0, 0x8D, 0x01,
0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0x21, 0x8D, 0x00, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60,
0xA9, 0xA0, 0x8D, 0x01, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0x4C, 0x4A, 0x81
};*/


/* LED SWIPE
byte data[] = {0xA9, 0xFF, 0x8D, 0x02, 0x60, 0xA9, 0x55, 0x8D, 
               0x00, 0x60, 0xa9, 0xaa, 0x8d, 0x00, 0x60, 0x4c,
               0x05, 0x80};*/

/* LCD RAM
byte data[] = {0xA2, 0xFF, 0x9A, 0xA9, 0xFF, 0x8D, 0x02, 0x60, 0xA9, 0xE0, 0x8D, 0x03, 0x60, 0xA9, 0x38, 0x20,
0x60, 0x80, 0xA9, 0x0E, 0x20, 0x60, 0x80, 0xA9, 0x06, 0x20, 0x60, 0x80, 0xA9, 0x48, 0x20, 0x73,
0x80, 0xA9, 0x65, 0x20, 0x73, 0x80, 0xA9, 0x6C, 0x20, 0x73, 0x80, 0xA9, 0x6C, 0x20, 0x73, 0x80,
0xA9, 0x6F, 0x20, 0x73, 0x80, 0xA9, 0x2C, 0x20, 0x73, 0x80, 0xA9, 0x20, 0x20, 0x73, 0x80, 0xA9,
0x77, 0x20, 0x73, 0x80, 0xA9, 0x6F, 0x20, 0x73, 0x80, 0xA9, 0x72, 0x20, 0x73, 0x80, 0xA9, 0x6C,
0x20, 0x73, 0x80, 0xA9, 0x64, 0x20, 0x73, 0x80, 0xA9, 0x21, 0x20, 0x73, 0x80, 0x4C, 0x5D, 0x80,
0x8D, 0x00, 0x60, 0xA9, 0x00, 0x8D, 0x01, 0x60, 0xA9, 0x80, 0x8D, 0x01, 0x60, 0xA9, 0x00, 0x8D,
0x01, 0x60, 0x60, 0x8D, 0x00, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0xA0, 0x8D, 0x01, 0x60,
0xA9, 0x20, 0x8D, 0x01, 0x60, 0x60};
*/

//LCD RAM byte

/*byte data[] = {
0xA2, 0xFF, 0x9A, 0xA9, 0xFF, 0x8D, 0x02, 0x60, 0xA9, 0xE0, 0x8D, 0x03, 0x60, 0xA9, 0x38, 0x20,
0x3B, 0x80, 0xA9, 0x0E, 0x20, 0x3B, 0x80, 0xA9, 0x06, 0x20, 0x3B, 0x80, 0xA2, 0x00, 0xBD, 0x2D,
0x80, 0xF0, 0x07, 0x20, 0x4E, 0x80, 0xE8, 0x4C, 0x1E, 0x80, 0x4C, 0x2A, 0x80, 0x48, 0x65, 0x6C,
0x6C, 0x6F, 0x2C, 0x20, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x21, 0x00, 0x8D, 0x00, 0x60, 0xA9, 0x00,
0x8D, 0x01, 0x60, 0xA9, 0x80, 0x8D, 0x01, 0x60, 0xA9, 0x00, 0x8D, 0x01, 0x60, 0x60, 0x8D, 0x00,
0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0xA0, 0x8D, 0x01, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60,
0x60
};*/

//Marcolbr AGNPCL
/*
byte data[] = {
0xA2, 0xFF, 0x9A, 0xA9, 0xFF, 0x8D, 0x02, 0x60, 0xA9, 0xE0, 0x8D, 0x03, 0x60, 0xA9, 0x38, 0x20,
0x4A, 0x80, 0xA9, 0x0E, 0x20, 0x4A, 0x80, 0xA9, 0x06, 0x20, 0x4A, 0x80, 0xA2, 0x00, 0xBD, 0x2D,
0x80, 0xF0, 0x07, 0x20, 0x5D, 0x80, 0xE8, 0x4C, 0x1E, 0x80, 0x4C, 0x2A, 0x80, 0x20, 0x20, 0x20,
0x20, 0x4D, 0x61, 0x72, 0x63, 0x6F, 0x6C, 0x62, 0x72, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x41, 0x47, 0x4E, 0x50, 0x43, 0x4C, 0x00, 0x8D, 0x00, 0x60, 0xA9, 0x00, 0x8D,
0x01, 0x60, 0xA9, 0x80, 0x8D, 0x01, 0x60, 0xA9, 0x00, 0x8D, 0x01, 0x60, 0x60, 0x8D, 0x00, 0x60,
0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0xA0, 0x8D, 0x01, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0x60
};*/

// conversion and Marcolbr 
/*
byte data[] = 
{
0xA2, 0xFF, 0x9A, 0xA9, 0xFF, 0x8D, 0x02, 0x60, 0xA9, 0xE0, 0x8D, 0x03, 0x60, 0xA9, 0x38, 0x20,
0xB2, 0x80, 0xA9, 0x0E, 0x20, 0xB2, 0x80, 0xA9, 0x06, 0x20, 0xB2, 0x80, 0xA9, 0x00, 0x8D, 0x04,
0x02, 0xAD, 0x91, 0x80, 0x8D, 0x00, 0x02, 0xAD, 0x92, 0x80, 0x8D, 0x01, 0x02, 0xA9, 0x00, 0x8D,
0x02, 0x02, 0x8D, 0x03, 0x02, 0x18, 0xA2, 0x10, 0x2E, 0x00, 0x02, 0x2E, 0x01, 0x02, 0x2E, 0x02,
0x02, 0x2E, 0x03, 0x02, 0x38, 0xAD, 0x02, 0x02, 0xE9, 0x0A, 0xA8, 0xAD, 0x03, 0x02, 0xE9, 0x00,
0x90, 0x06, 0x8C, 0x02, 0x02, 0x8D, 0x03, 0x02, 0xCA, 0xD0, 0xDD, 0x2E, 0x00, 0x02, 0x2E, 0x01,
0x02, 0xAD, 0x02, 0x02, 0x18, 0x69, 0x30, 0x20, 0x93, 0x80, 0xAD, 0x00, 0x02, 0x0D, 0x01, 0x02,
0xD0, 0xBB, 0xA2, 0x00, 0xBD, 0x04, 0x02, 0xF0, 0x07, 0x20, 0xC5, 0x80, 0xE8, 0x4C, 0x74, 0x80,
0xA2, 0x00, 0xBD, 0xA8, 0x80, 0xF0, 0x07, 0x20, 0xC5, 0x80, 0xE8, 0x4C, 0x82, 0x80, 0x4C, 0x8E,
0x80, 0xC1, 0x06, 0x48, 0xA0, 0x00, 0xB9, 0x04, 0x02, 0xAA, 0x68, 0x99, 0x04, 0x02, 0xC8, 0x8A,
0x48, 0xD0, 0xF3, 0x68, 0x99, 0x04, 0x02, 0x60, 0x20, 0x4D, 0x61, 0x72, 0x63, 0x6F, 0x6C, 0x62,
0x72, 0x00, 0x8D, 0x00, 0x60, 0xA9, 0x00, 0x8D, 0x01, 0x60, 0xA9, 0x80, 0x8D, 0x01, 0x60, 0xA9,
0x00, 0x8D, 0x01, 0x60, 0x60, 0x8D, 0x00, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0xA0, 0x8D,
0x01, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0x60
};*/

/* 2702 Marcolbr AGNPCL
byte data[] = {
0xA2, 0xFF, 0x9A, 0xA9, 0xFF, 0x8D, 0x02, 0x60, 0xA9, 0xE0, 0x8D, 0x03, 0x60, 0xA9, 0x38, 0x20,
0xE6, 0x80, 0xA9, 0x01, 0x20, 0xE6, 0x80, 0xA9, 0x02, 0x20, 0xE6, 0x80, 0xA9, 0x0F, 0x20, 0xE6,
0x80, 0xA9, 0x06, 0x20, 0xE6, 0x80, 0xA9, 0x00, 0x8D, 0x04, 0x02, 0xAD, 0x9B, 0x80, 0x8D, 0x00,
0x02, 0xAD, 0x9C, 0x80, 0x8D, 0x01, 0x02, 0xA9, 0x00, 0x8D, 0x02, 0x02, 0x8D, 0x03, 0x02, 0x18,
0xA2, 0x10, 0x2E, 0x00, 0x02, 0x2E, 0x01, 0x02, 0x2E, 0x02, 0x02, 0x2E, 0x03, 0x02, 0x38, 0xAD,
0x02, 0x02, 0xE9, 0x0A, 0xA8, 0xAD, 0x03, 0x02, 0xE9, 0x00, 0x90, 0x06, 0x8C, 0x02, 0x02, 0x8D,
0x03, 0x02, 0xCA, 0xD0, 0xDD, 0x2E, 0x00, 0x02, 0x2E, 0x01, 0x02, 0xAD, 0x02, 0x02, 0x18, 0x69,
0x30, 0x20, 0x9D, 0x80, 0xAD, 0x00, 0x02, 0x0D, 0x01, 0x02, 0xD0, 0xBB, 0xA2, 0x00, 0xBD, 0x04,
0x02, 0xF0, 0x07, 0x20, 0xF9, 0x80, 0xE8, 0x4C, 0x7E, 0x80, 0xA2, 0x00, 0xBD, 0xB2, 0x80, 0xF0,
0x07, 0x20, 0xF9, 0x80, 0xE8, 0x4C, 0x8C, 0x80, 0x4C, 0x98, 0x80, 0x8E, 0x0A, 0x48, 0xA0, 0x00,
0xB9, 0x04, 0x02, 0xAA, 0x68, 0x99, 0x04, 0x02, 0xC8, 0x8A, 0x48, 0xD0, 0xF3, 0x68, 0x99, 0x04,
0x02, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4D, 0x61, 0x72, 0x63, 0x6F, 0x6C, 0x62, 0x72, 0x20, 0x41,
0x47, 0x4E, 0x50, 0x43, 0x4C, 0x00, 0x8D, 0x00, 0x60, 0xA9, 0x00, 0x8D, 0x01, 0x60, 0xA9, 0x80,
0x8D, 0x01, 0x60, 0xA9, 0x00, 0x8D, 0x01, 0x60, 0x60, 0x8D, 0x00, 0x60, 0xA9, 0x20, 0x8D, 0x01,
0x60, 0xA9, 0xA0, 0x8D, 0x01, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0x60
};*/

//Interrupts
/*
byte data[] = {
0xA2, 0xFF, 0x9A, 0x58, 0xA9, 0xFF, 0x8D, 0x02, 0x60, 0xA9, 0xE0, 0x8D, 0x03, 0x60, 0xA9, 0x38,
0x20, 0xDB, 0x80, 0xA9, 0x02, 0x20, 0xDB, 0x80, 0xA9, 0x0F, 0x20, 0xDB, 0x80, 0xA9, 0x06, 0x20,
0xDB, 0x80, 0xA9, 0x01, 0x20, 0xDB, 0x80, 0xA2, 0x00, 0xBD, 0xCB, 0x80, 0xF0, 0x07, 0x20, 0xEE,
0x80, 0xE8, 0x4C, 0x29, 0x80, 0xA2, 0x00, 0xA9, 0x01, 0x20, 0xDB, 0x80, 0xA9, 0x0E, 0x20, 0xDB,
0x80, 0xA9, 0x00, 0x8D, 0x0A, 0x02, 0x8D, 0x0B, 0x02, 0xA9, 0x02, 0x20, 0xDB, 0x80, 0xA9, 0x00,
0x8D, 0x04, 0x02, 0x78, 0xAD, 0x0A, 0x02, 0x8D, 0x00, 0x02, 0xAD, 0x0B, 0x02, 0x8D, 0x01, 0x02,
0x58, 0xA9, 0x00, 0x8D, 0x02, 0x02, 0x8D, 0x03, 0x02, 0x18, 0xA2, 0x10, 0x2E, 0x00, 0x02, 0x2E,
0x01, 0x02, 0x2E, 0x02, 0x02, 0x2E, 0x03, 0x02, 0x38, 0xAD, 0x02, 0x02, 0xE9, 0x0A, 0xA8, 0xAD,
0x03, 0x02, 0xE9, 0x00, 0x90, 0x06, 0x8C, 0x02, 0x02, 0x8D, 0x03, 0x02, 0xCA, 0xD0, 0xDD, 0x2E,
0x00, 0x02, 0x2E, 0x01, 0x02, 0xAD, 0x02, 0x02, 0x18, 0x69, 0x30, 0x20, 0xB6, 0x80, 0xAD, 0x00,
0x02, 0x0D, 0x01, 0x02, 0xD0, 0xBB, 0xA2, 0x00, 0xBD, 0x04, 0x02, 0xF0, 0x9C, 0x20, 0xEE, 0x80,
0xE8, 0x4C, 0xA8, 0x80, 0x8E, 0x0A, 0x48, 0xA0, 0x00, 0xB9, 0x04, 0x02, 0xAA, 0x68, 0x99, 0x04,
0x02, 0xC8, 0x8A, 0x48, 0xD0, 0xF3, 0x68, 0x99, 0x04, 0x02, 0x60, 0x4D, 0x61, 0x72, 0x63, 0x6F,
0x6C, 0x62, 0x72, 0x20, 0x41, 0x47, 0x4E, 0x50, 0x43, 0x4C, 0x00, 0x8D, 0x00, 0x60, 0xA9, 0x00,
0x8D, 0x01, 0x60, 0xA9, 0x80, 0x8D, 0x01, 0x60, 0xA9, 0x00, 0x8D, 0x01, 0x60, 0x60, 0x8D, 0x00,
0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0xA0, 0x8D, 0x01, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60,
0x60, 0xEE, 0x0A, 0x02, 0xD0, 0x03, 0xEE, 0x0B, 0x02, 0x40
};
*/

//shift
/*
byte data[] = 
{
0xA2, 0xFF, 0x9A, 0x58, 0xA9, 0xFF, 0x8D, 0x02, 0x60, 0xA9, 0xE0, 0x8D, 0x03, 0x60, 0xA9, 0x38,
0x20, 0x4A, 0x80, 0xA9, 0x02, 0x20, 0x4A, 0x80, 0xA9, 0x0F, 0x20, 0x4A, 0x80, 0xA9, 0x06, 0x20,
0x4A, 0x80, 0xA9, 0x01, 0x20, 0x4A, 0x80, 0xA2, 0x00, 0xBD, 0x48, 0x80, 0xF0, 0x07, 0x20, 0x5D,
0x80, 0xE8, 0x4C, 0x29, 0x80, 0x4C, 0x35, 0x80, 0x4D, 0x61, 0x72, 0x63, 0x6F, 0x6C, 0x62, 0x72,
0x20, 0x41, 0x47, 0x4E, 0x50, 0x43, 0x4C, 0x00, 0x20, 0x00, 0x8D, 0x00, 0x60, 0xA9, 0x00, 0x8D,
0x01, 0x60, 0xA9, 0x80, 0x8D, 0x01, 0x60, 0xA9, 0x00, 0x8D, 0x01, 0x60, 0x60, 0x8D, 0x00, 0x60,
0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0xA0, 0x8D, 0x01, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0x60,
0x4C, 0x27, 0x80
};*/


byte data[] = 
{
0xA2, 0xFF, 0x9A, 0x58, 0xA9, 0xFF, 0x8D, 0x02, 0x60, 0xA9, 0xE0, 0x8D, 0x03, 0x60, 0xA9, 0x38,
0x20, 0x70, 0x80, 0xA9, 0x02, 0x20, 0x70, 0x80, 0xA9, 0x0F, 0x20, 0x70, 0x80, 0xA9, 0x06, 0x20,
0x70, 0x80, 0xA9, 0x01, 0x20, 0x70, 0x80, 0xA2, 0x00, 0xBD, 0x46, 0x80, 0xF0, 0x07, 0x20, 0x83,
0x80, 0xE8, 0x4C, 0x29, 0x80, 0xA2, 0x00, 0xBD, 0x6E, 0x80, 0xF0, 0x07, 0x20, 0x83, 0x80, 0xE8,
0x4C, 0x37, 0x80, 0x4C, 0x43, 0x80, 0x4D, 0x61, 0x72, 0x63, 0x6F, 0x6C, 0x62, 0x72, 0x20, 0x41,
0x47, 0x4E, 0x50, 0x43, 0x4C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x00,
0x8D, 0x00, 0x60, 0xA9, 0x00, 0x8D, 0x01, 0x60, 0xA9, 0x80, 0x8D, 0x01, 0x60, 0xA9, 0x00, 0x8D,
0x01, 0x60, 0x60, 0x8D, 0x00, 0x60, 0xA9, 0x20, 0x8D, 0x01, 0x60, 0xA9, 0xA0, 0x8D, 0x01, 0x60,
0xA9, 0x20, 0x8D, 0x01, 0x60, 0x60, 0x4C, 0x35, 0x80
};

volatile int OUTPUT_EN = 0;

void setAddress(unsigned long int address)//, bool NOT_OE)
{
  shiftOut(SHIFT_DATA, SHIFT_CLK, MSBFIRST, (address >> 8)); // | (NOT_OE ? 0x00 : 0x80));
  shiftOut(SHIFT_DATA, SHIFT_CLK, MSBFIRST, address);


  digitalWrite(SHIFT_LATCH, LOW);
  digitalWrite(SHIFT_LATCH, HIGH);
  digitalWrite(SHIFT_LATCH, LOW);
}

byte readEEPROM(unsigned long int address) //read only one address each time
{
  for(int pin = EEPROM_D0; pin <= EEPROM_D7; pin++)
  {
      pinMode(pin, INPUT);
  }

  OUTPUT_EN = 0;
  digitalWrite(A0, OUTPUT_EN);
  setAddress(address); //, true);

  byte data = 0;
  for(int pin = EEPROM_D7; pin >= EEPROM_D0; pin -= 1)
  {
    data = (data << 1) + digitalRead(pin);
  }
  return data;
}

void writeEEPROM(unsigned long int address, byte data)
{
  setAddress(address); //, false);
  OUTPUT_EN = 1;
  digitalWrite(A0, OUTPUT_EN);

  for(int pin = EEPROM_D0; pin <= EEPROM_D7; pin++)
  {
      pinMode(pin, OUTPUT);
  }

  for(int pin = EEPROM_D0; pin <= EEPROM_D7; pin++)
  {
    digitalWrite(pin, data & 1);
    data = data >> 1;
  }

  digitalWrite(WRITE_EN, LOW);
  delayMicroseconds(1);
  digitalWrite(WRITE_EN, HIGH);

  delay(10);

  Serial.print("Writing into ");
  
  char wr[80];
    sprintf(wr, "%04x", address);
  
    Serial.println(wr);
  
}

void ClearMemory(unsigned long int start, unsigned long int end)
{
   for(unsigned long int address = start; address <= end; address++) 
  {
    writeEEPROM(address, 0x00);
  }
}

void NoOpMemory(unsigned long int start, unsigned long int end)
{
   for(unsigned long int address = start; address <= end; address++) 
  {
    writeEEPROM(address, 0xea);
  }
}

void printContents(unsigned long int start, unsigned long int end)
{
  delay(500);
  for(unsigned long int base = start; base <= end; base += 16) 
  {
    byte data[16];

    for(int offset = 0; offset <= 15; offset += 1)
    {
      data[offset] = readEEPROM(base + offset);
    }

    char buf[80];
    sprintf(buf, "%05ld: %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x",
     base, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9], data[10], data[11], data[12], data[13], data[14], data[15]);
  
    Serial.println(buf);
  }
  
}

void setup() {

  pinMode(SHIFT_DATA, OUTPUT);
  pinMode(SHIFT_CLK, OUTPUT);
  pinMode(SHIFT_LATCH, OUTPUT);
  pinMode(A0, OUTPUT);

  digitalWrite(WRITE_EN, HIGH);
  pinMode(WRITE_EN, OUTPUT);
  
  Serial.begin(57600);

  //Erase entire EEPROM
  //ClearMemory(0, 127); //32767
  NoOpMemory(154, 157);

  //Write how many bits you need
  for(unsigned long int address = 0; address <= 153; address++)
  {
   delay(10);
  writeEEPROM(address, data[address]); 
 }
//writeEEPROM(0x12, 0xea);
//writeEEPROM(0x13, 0xea);
   delay(10);

  writeEEPROM(0x7ffa, 0x96);
     delay(10);

  writeEEPROM(0x7ffb, 0x80);

  printContents(0, 300);
  printContents(32752, 32767);

}

void loop() {
  // put your main code here, to run repeatedly:

}

